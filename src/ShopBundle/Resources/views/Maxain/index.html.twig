{% extends 'base.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <style type="text/css">
        .info ol li {
            float: none; display: inline-block;
        }
    </style>
{% endblock %}
{% block body %}
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                {% for flash_message in app.session.flashBag.get('notice') %}
                    <div class="flash-notice">
                        <p>{{ flash_message }}</p>
                    </div>
                {% endfor %}
            </div>
            <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="false">
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingOne">
                        <h4 class="panel-title">
                            <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                Add Invoice
                            </a>
                        </h4>
                    </div>
                    <div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                        <div class="panel-body">
                            <div class="col-md-12 bg-success info">
                                <p> Excel file structure has been </p>
                                <ol type="A" style="float: none; display: inline-block;">
                                    <li><b>A</b>&nbsp;:&nbsp;<span>Name</span></li>
                                    <li><b>B</b>&nbsp;:&nbsp;<span>Count</span></li>
                                    <li><b>C</b>&nbsp;:&nbsp;<span>Unit</span></li>
                                    <li><b>D</b>&nbsp;:&nbsp;<span>Price</span></li>
                                    <li><b>E</b>&nbsp;:&nbsp;<span>Currency</span></li>
                                    <li><b>F</b>&nbsp;:&nbsp;<span>Neto</span></li>
                                    <li><b>G</b>&nbsp;:&nbsp;<span>Bruto</span></li>
                                    <li><b>H</b>&nbsp;:&nbsp;<span>Package</span></li>
                                    <li><b>I</b>&nbsp;:&nbsp;<span>Description</span></li>
                                </ol>
                                {{ form_start(form) }}
                                {{ form_widget(form) }}
                                {{ form_end(form) }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {% if is_granted('ROLE_SUPER_ADMIN') %}
            <div class="col-md-6">
                <div class="flash-notice"></div>
                <button class="btn btn-sm btn-success" id="utf-8-covert">Convert UTF-8</button>
            </div>
            {% endif %}
        </div>
        <div class="wrapper">
            {{ grid(grid, 'APYDataGridBundle::blocks.html.twig') }}
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        $('#utf-8-covert').on('click', function () {
            var row = 0;
            getData(row);
        });

        function getData(row) {
            jQuery.ajax({
                url: "/api/taxes/" + row + "/codes",
                type: "GET",
                contentType: 'application/json; charset=utf-8',
                async: true,
                success: function (resultData) {
                    var info = [];
                    $.each(resultData, function( index, value ) {
                        info.push(convert(value, true));
                    });
                    sendRequest(info, info[info.length-1]);
                    console.log(info);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (errorThrown === 'Not Found') {
                        $('table.order>tbody').html('');
                        $('.total-count').html('<span>Items Count </span> 0');
                        $('.total-price').html('<span>Total price </span>$ 0');
                        $('.selected_infos').html('Bag&nbsp;<span class="badge">0</span>')
                    }
                    console.log(jqXHR, textStatus, errorThrown);
                }
            });
        }

        /**
         *
         * @param data
         * @param method
         */
        function sendRequest(data, method) {
            // console.log(data); return;
            jQuery.ajax({
                url: '/app_dev.php/api/taxes/codes',
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                async: true,
                dataType: "json",

                data: JSON.stringify(data),
                success: function (ansvwe) {
                    if(ansvwe.id != 'undefined'){

                        getData(method.id);
                        $('.flash-notice').html('<b>Finished convert to utf-8 '+method.id+' Item</b>')
                    }else {
                        $('.flash-notice').html('<b>Finished convert to utf-8</b>')
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    /*if(jqXHR.status ===400){
                     $('h4.modal-title').text('Cannot add');
                     $('div.modal-body').html('<p>'+ jqXHR.responseJSON +'</p>');
                     $('.modal').addClass('in').css({'display':'block'})
                     }*/
                    console.log(jqXHR, textStatus, errorThrown);
                }
            });
        }
        //initialize
        var ANSI = new Array();
        var UNICODE = new Array();

        for (var i = 178; i <= 252; i += 2) {
            ANSI.push(i); //mecatar ANSI
            UNICODE.push(1328 + (i - 176) / 2); //mecatar Unicode
            ANSI.push(i + 1); //poqratar ANSI
            UNICODE.push(1376 + (i - 176) / 2); //poqratar Unicode
        }
        ANSI.push(168);
        UNICODE.push(0x587); //ev

        ANSI.push(183);
        UNICODE.push(8226);	//poqratar g-n (bullet)
        ANSI.push(8226);
        UNICODE.push(1379);	//poqratar g-n (bullet)

        ANSI.push(39);
        UNICODE.push(0x55A); //apostrophe
        ANSI.push(176);
        UNICODE.push(0x55B); //shesht
        ANSI.push(175);
        UNICODE.push(0x55C); //bacakanchakan
        ANSI.push(170);
        UNICODE.push(0x55D); //but
        ANSI.push(177);
        UNICODE.push(0x55E); //harcakan
        ANSI.push(163);
        UNICODE.push(0x589); //verjaket
        ANSI.push(173);
        UNICODE.push(0x58A); //hyphen
        ANSI.push(167);
        UNICODE.push(0xAB); //bacvogh chakert
        ANSI.push(166);
        UNICODE.push(0xBB); //pakvogh chakert
        ANSI.push(171);
        UNICODE.push(0x2C); //storaket
        ANSI.push(169);
        UNICODE.push(0x2E); //mijaket
        ANSI.push(174);
        UNICODE.push(0x2026); //bazmaket

        ANSI.push(0, 0);
        UNICODE.push(0, 0); //2 hat CUSTOM :)
        // end

        var ANSIbackup = ANSI.slice(0);	//XEROX!
        var UNICODEbackup = UNICODE.slice(0);

        function convert(object, A2U) {// from-n u to-n textareaneri IDnern en
            arrFrom = A2U ? ANSI : UNICODE;
            arrTo = A2U ? UNICODE : ANSI;

            var ekac = object.name;
            var gnacogh = "";
            var len = ekac.length;
            var tar;
            var current; //boolean

            for (var i = 0; i < len; i++) {
                tar = ekac.charCodeAt(i);
                //console.info(String.fromCharCode(tar));
                FromumKa = false;
                for (var j = 0; j < arrFrom.length; j++) {
                    if (tar == arrFrom[j]) {
                        if (arrTo[j] == "") {
                            FromumKa = true;
                            break;
                        }
                        gnacogh += String.fromCharCode(arrTo[j]);
                        FromumKa = true;
                        break;
                    }
                }
                if (!FromumKa) gnacogh += String.fromCharCode(tar);
            }
            return {id:object.id,name:gnacogh};
        }

        function U2A(e) {
            console.info("U2A");
            var t1 = CKEDITOR.instances.unicodeextended;
            var t2 = CKEDITOR.instances.ansiextended;
            if (typeof t != 'undefined')
                clearTimeout(t);
            t = setTimeout(function () {
                console.info("  U2A");
                $('#unicodeextended').val(t1.getData());
                convert('unicodeextended', 'ansiextended', false);
                t2.setData($('#ansiextended').val());
            }, 50);
        }
        function A2U(e) {
            console.info("A2U");
            var t1 = CKEDITOR.instances.unicodeextended;
            var t2 = CKEDITOR.instances.ansiextended;
            if (!t2.checkDirty()) return;
            t2.resetDirty();
            if (typeof tt != 'undefined')
                clearTimeout(tt);
            tt = setTimeout(function () {
                console.info("  A2U");
                $('#ansiextended').val(t2.getData());
                convert('ansiextended', 'unicodeextended', true);
                t1.setData($('#unicodeextended').val());
            }, 100);
        }
        function isChanged(i) {
            return ANSI[i] != ANSIbackup[i] || UNICODE[i] != UNICODEbackup[i];
        }
        function createMap() {
            var $table = $('<table><tbody></tbody></table>').appendTo($('#tableContainer'));
            var $tr, $lastTd;
            for (var i = 0; i < ANSI.length; i++) {
                $tr = $('<tr>').appendTo($table).attr('hamar', i).click(function () {
                    showForm($(this).attr('hamar'));
                });
                $('<td class="ansi"><span>' + String.fromCharCode(ANSI[i]) + '</span></td>').appendTo($tr);
                $('<td class="unicode"><span>' + String.fromCharCode(UNICODE[i]) + '</span></td>').appendTo($tr);
                $lastTd = $('<td></td>').appendTo($tr);
                $('<a href="#" class="OK"></a>').attr('hamar', i).click(function (e) {
                    e.stopPropagation();
                    changeMap($(this).attr('hamar'));
                    return false
                }).appendTo($lastTd).hide();
                $('<a href="#" class="reset"></a>').attr('hamar', i).click(function () {
                    resetMap($(this).attr('hamar'));
                    return false
                }).appendTo($lastTd).hide();
                if (LS)//guini harc@
                    if (isChanged(i))
                        $tr.addClass('changed').find('.reset').css('display', 'block');
            }
        }
        function updateMapRow(i) {
            var $tr = getMapRow(i).click(function () {
                showForm($(this).attr('hamar'));
            });
            $tr.find('td:nth-child(1)').html(String.fromCharCode(ANSI[i]));
            $tr.find('td:nth-child(2)').html(String.fromCharCode(UNICODE[i]));

            if (isChanged(i))
                $tr.addClass('changed').find('.reset').css('display', 'block');
            else
                $tr.removeClass('changed').find('.reset').hide();
        }
        function changeMap(i) {
            var $tr = getMapRow(i);
            $tr.find('.reset').css('display', 'block');
            $tr.find('.OK').hide();
            ANSI[i] = parseInt($tr.find('td:nth-child(1) input').val());
            UNICODE[i] = parseInt($tr.find('td:nth-child(2) input').val());
            updateMapRow(i);

            if (LS)
                $('#storage').click(function () {
                    LSsaveMap();
                    return false
                }).css('display', 'block');
        }
        function resetMap(i) {
            ANSI[i] = ANSIbackup[i];
            UNICODE[i] = UNICODEbackup[i];
            updateMapRow(i);
        }
        function getMapRow(hamar) {
            return $('#tableContainer tbody tr:nth-child(' + (parseInt(hamar) + 1) + ')');
        }
        function showForm(hamar) {
            var $tr = getMapRow(hamar).unbind('click'); //vor el onclicki jamanak ban chani
            $tr.find('td:nth-child(1)').html('<input type="text" value="' + ANSI[hamar] + '"/>');
            $tr.find('td:nth-child(2)').html('<input type="text" value="' + UNICODE[hamar] + '"/>');
            $tr.find('.reset').hide();
            $tr.find('.OK').css('display', 'block');
            addTooltip("#map input", "#tInputs");
        }

        var LS = typeof localStorage != 'undefined';
        if (LS)
            LSloadMap();
        function LSsaveMap() {
            for (var i = 0; i < ANSI.length; i++) {
                if (!isChanged(i)) {
                    localStorage.removeItem('mapAnsi' + i);
                    localStorage.removeItem('mapUnicode' + i);
                } else {
                    localStorage.setItem('mapAnsi' + i, ANSI[i]);
                    localStorage.setItem('mapUnicode' + i, UNICODE[i]);
                }
            }
            $('#storage').hide();
        }
        function LSloadMap() {
            var x;
            for (var i = 0; i < ANSI.length; i++) {
                x = localStorage.getItem('mapAnsi' + i);
                if (x) {
                    ANSI[i] = x;
                    UNICODE[i] = localStorage.getItem('mapUnicode' + i);
                    updateMapRow(i);
                }
            }
        }

        isExtended = false;
        neverExtended = true;
        $(function () {
            $('#ansi').click(function () {
                this.select()
            })
                .keydown(function () {
                    if (typeof t != 'undefined') clearTimeout(t);
                    t = setTimeout(function () {
                        convert('ansi', 'unicode', true);
                    }, 50);
                });
            $('#unicode').click(function () {
                this.select();
            })
                .keydown(function () {
                    if (typeof t != 'undefined') clearTimeout(t);
                    t = setTimeout(function () {
                        convert('unicode', 'ansi', false);
                    }, 50);
                });

            $('.tabs a').click(function () {
                toggleExtended();
                return false
            });
            function toggleExtended() {
                $('.tabs a').toggleClass('tabActive');
                $('.extended').toggle();
                $('.simple').toggle();
                isExtended = !isExtended;
                if (neverExtended) {
                    neverExtended = false;
                    var config = {
                        toolbarLocation: 'none',
                        removePlugins: 'elementspath',
                        resize_enabled: false,
                        skin: 'v2',
                        height: 158,
                        entities: false
                    };
                    var CKEa = CKEDITOR.replace('ansiextended', config);
                    CKEa.on("instanceReady", function () {
                        this.document.on("keydown", A2U);
                    });
                    CKEa.on("instanceReady", function () {
                        this.document.on("paste", A2U);
                    });
                    var CKEu = CKEDITOR.replace('unicodeextended', config);
                    CKEu.on("instanceReady", function () {
                        this.document.on("keydown", U2A);
                    });
                    CKEu.on("instanceReady", function () {
                        this.document.on("paste", U2A);
                    });
                }
            }

            $('#mapButton').click(function () {
                $('#map').toggle();
                return false
            });
            createMap();
        });

    </script>
{% endblock %}

